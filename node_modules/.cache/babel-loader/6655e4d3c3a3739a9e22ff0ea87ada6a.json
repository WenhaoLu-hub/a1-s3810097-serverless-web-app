{"ast":null,"code":"var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nvar numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/; // const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n//polyfill\n\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\n\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nvar consider = {\n  hex: true,\n  leadingZeros: true,\n  decimalPoint: \"\\.\",\n  eNotation: true //skipLike: /regex/\n\n};\n\nfunction toNumber(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // const options = Object.assign({}, consider);\n  // if(opt.leadingZeros === false){\n  //     options.leadingZeros = false;\n  // }else if(opt.hex === false){\n  //     options.hex = false;\n  // }\n  options = Object.assign({}, consider, options);\n  if (!str || typeof str !== \"string\") return str;\n  var trimmedStr = str.trim(); // if(trimmedStr === \"0.0\") return 0;\n  // else if(trimmedStr === \"+0.0\") return 0;\n  // else if(trimmedStr === \"-0.0\") return -0;\n\n  if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;else if (options.hex && hexRegex.test(trimmedStr)) {\n    return Number.parseInt(trimmedStr, 16); // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n  } else {\n    //separate negative sign, leading zeros, and rest number\n    var match = numRegex.exec(trimmedStr);\n\n    if (match) {\n      var sign = match[1];\n      var leadingZeros = match[2];\n      var numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n      //trim ending zeros for floating number\n\n      var eNotation = match[4] || match[6];\n      if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n      else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n      else {\n        //no leading zeros or leading zeros are allowed\n        var num = Number(trimmedStr);\n        var numStr = \"\" + num;\n\n        if (numStr.search(/[eE]/) !== -1) {\n          //given number is long and parsed to eNotation\n          if (options.eNotation) return num;else return str;\n        } else if (eNotation) {\n          //given number has enotation\n          if (options.eNotation) return num;else return str;\n        } else if (trimmedStr.indexOf(\".\") !== -1) {\n          //floating number\n          // const decimalPart = match[5].substr(1);\n          // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n          // const p = numStr.indexOf(\".\");\n          // const givenIntPart = numStr.substr(0,p);\n          // const givenDecPart = numStr.substr(p+1);\n          if (numStr === \"0\" && numTrimmedByZeros === \"\") return num; //0.0\n          else if (numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n          else if (sign && numStr === \"-\" + numTrimmedByZeros) return num;else return str;\n        }\n\n        if (leadingZeros) {\n          // if(numTrimmedByZeros === numStr){\n          //     if(options.leadingZeros) return num;\n          //     else return str;\n          // }else return str;\n          if (numTrimmedByZeros === numStr) return num;else if (sign + numTrimmedByZeros === numStr) return num;else return str;\n        }\n\n        if (trimmedStr === numStr) return num;else if (trimmedStr === sign + numStr) return num; // else{\n        //     //number with +/- sign\n        //     trimmedStr.test(/[-+][0-9]);\n        // }\n\n        return str;\n      } // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n    } else {\n      //non-numeric string\n      return str;\n    }\n  }\n}\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\n\n\nfunction trimZeros(numStr) {\n  if (numStr && numStr.indexOf(\".\") !== -1) {\n    //float\n    numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n\n    if (numStr === \".\") numStr = \"0\";else if (numStr[0] === \".\") numStr = \"0\" + numStr;else if (numStr[numStr.length - 1] === \".\") numStr = numStr.substr(0, numStr.length - 1);\n    return numStr;\n  }\n\n  return numStr;\n}\n\nmodule.exports = toNumber;","map":null,"metadata":{},"sourceType":"script"}